date: 2013-11-17

<h1>Week 3: The Perks of Pair Programming</h1>

<p>
  Even though we’ve done bits and pieces of pair programming in class before, we got a real taste of it with last week’s project, that involved the manipulation of databases and lasted the whole week.
</p>

<p>
  Pair Programming is typically described as two people working on the same code side by side. While one person (driver) writes code, the other (navigator) scans it for bugs, and thinks about the strategy for the next step. While this is what pair programming should be in theory, our approach was slightly different, as both my partner and I were more collaborative, thinking through each move together. 
</p>

<p>
  It was in the very beginning when my pair programmer and I noticed that our personal learning and working styles were very different. While I am a very visual person, my partner is very comfortable manipulating abstract objects in her mind (#math background). Since we had to work with several relational databases, my approach included creating schematic cheat-sheets to refer to, and manipulating real examples to see what behavior we can expect from our program before we start implementing it in the code. My partner seemed to be very comfortable planning everything in her mind.
</p>

<p>
  Once we got over the initial planning phase, the process seemed to go very smoothly as long as the tasks were simple enough. But when it started getting more complicated our different problem solving styles started to conflict with each other. There are certainly times when two heads are better than one, but as we’ve  discovered in our pair programming experience, there are also times when the two heads need to work on their own. After taking our time to work alone for a while and come to some conclusions on our own, the “white board discussion” was a great way to discuss our ideas and find the best solution to a problem.
</p>

<p>
  The most challenging part of the whole pair programming experience to me was the time when my partner and I wanted to take different paths to solve a certain problem. My partner’s idea was to use a hash, and in my opinion using an array would have been a simpler and safer way to do it. This was in part because the whole idea of hashes in ruby is new to me, and while I seem to understand what it is and what it does, I felt like going down that path for me, at this point, is like being put in front of a piano: I know what it is, and I know what it does, I just don’t know how to operate it yet. I was afraid I would have gotten lost if we decided to go my pair programmer’s way, but then I figured that it would actually be a great learning experience for me.  We agreed on using a hash, and I am glad we did! Even though I have not been able to contribute much, I definitely learned more about what a hash can and cannot do, and how we can use it to solve certain problems.
</p>

<p>
  I think pair programming is a useful tool to have in a software developer’s toolbox, it produces cleaner, better code and it is great for solving problems and a very effective way to share knowledge.
</p>

